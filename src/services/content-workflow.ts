import { z } from 'zod';
import { GitHubService } from './github';
import { NotionService } from './notion';
import { GoogleCalendarService } from './google-calendar';
import { WebSearchService } from './web-search';

export class ContentWorkflowService {
  constructor(
    private githubService: GitHubService,
    private notionService: NotionService,
    private calendarService: GoogleCalendarService,
    private webSearchService: WebSearchService
  ) {}

  async createContentPlan(args: any) {
    const schema = z.object({
      topic: z.string(),
      contentType: z.string(),
      deadline: z.string(),
      assignee: z.string().optional(),
    });

    const { topic, contentType, deadline, assignee } = schema.parse(args);

    try {
      // Step 1: Research the topic
      console.error('üî¨ Researching topic...');
      const researchResult = await this.webSearchService.researchTopic({ topic, depth: 'comprehensive' });

      // Step 2: Create Notion page for content planning
      console.error('üìù Creating Notion page...');
      const notionContent = `# Content Plan: ${topic}

## Content Type
${contentType}

## Research Summary
${researchResult.content[0].text}

## Tasks
- [ ] Research phase (completed)
- [ ] Outline creation
- [ ] Content writing
- [ ] Review and editing
- [ ] Final approval
- [ ] Publishing

## Timeline
- Deadline: ${new Date(deadline).toLocaleDateString()}
- Assignee: ${assignee || 'TBD'}

## Notes
This content plan was automatically generated by the Content Workflow MCP Server.`;

      const notionResult = await this.notionService.createPage({
        title: `Content Plan: ${topic}`,
        content: notionContent,
        tags: [contentType, 'content-plan', 'automated'],
      });

      // Step 3: Create GitHub issue for tracking
      console.error('üêô Creating GitHub issue...');
      const githubResult = await this.githubService.createIssue({
        title: `Content Development: ${topic}`,
        body: `## Content Development Task

**Topic**: ${topic}
**Type**: ${contentType}
**Deadline**: ${new Date(deadline).toLocaleDateString()}
**Assignee**: ${assignee || 'TBD'}

### Research Summary
${researchResult.content[0].text.split('\n').slice(0, 10).join('\n')}...

### Tasks
- [ ] Research phase (completed)
- [ ] Outline creation
- [ ] Content writing
- [ ] Review and editing
- [ ] Final approval
- [ ] Publishing

### Notion Page
${notionResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Notion page created'}`,
        labels: ['content', contentType, 'automated'],
      });

      // Step 4: Create calendar events for milestones
      console.error('üìÖ Creating calendar events...');
      const deadlineDate = new Date(deadline);
      const startDate = new Date(deadlineDate.getTime() - 7 * 24 * 60 * 60 * 1000); // 1 week before deadline

      const calendarResult = await this.calendarService.createEvent({
        title: `Content Deadline: ${topic}`,
        description: `Final deadline for ${contentType} content about ${topic}. Notion page and GitHub issue have been created for tracking.`,
        startTime: deadlineDate.toISOString(),
        endTime: new Date(deadlineDate.getTime() + 60 * 60 * 1000).toISOString(), // 1 hour duration
        attendees: assignee ? [assignee] : [],
      });

      // Step 5: Create milestone calendar event
      const milestoneResult = await this.calendarService.createEvent({
        title: `Content Milestone: ${topic}`,
        description: `Midpoint check-in for ${contentType} content about ${topic}. Review progress and adjust timeline if needed.`,
        startTime: startDate.toISOString(),
        endTime: new Date(startDate.getTime() + 60 * 60 * 1000).toISOString(),
        attendees: assignee ? [assignee] : [],
      });

      return {
        content: [
          {
            type: 'text',
            text: `üéØ **Content Plan Created Successfully!**\n\n**Topic**: ${topic}\n**Type**: ${contentType}\n**Deadline**: ${new Date(deadline).toLocaleDateString()}\n**Assignee**: ${assignee || 'TBD'}\n\n### ‚úÖ Completed Steps:\n\n1. **Research**: Comprehensive research completed\n2. **Notion Page**: Content planning page created\n3. **GitHub Issue**: Development tracking issue created\n4. **Calendar Events**: Deadline and milestone events scheduled\n\n### üìã Next Steps:\n\n‚Ä¢ Review the research summary in the Notion page\n‚Ä¢ Create content outline based on research\n‚Ä¢ Begin content development\n‚Ä¢ Use GitHub issue for progress tracking\n‚Ä¢ Check calendar for upcoming deadlines\n\n### üîó Links:\n\n‚Ä¢ **Notion Page**: ${notionResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Created'}\n‚Ä¢ **GitHub Issue**: ${githubResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Created'}\n‚Ä¢ **Calendar Events**: ${calendarResult.content[0].text.split('Event: ')[1]?.split('\n')[0] || 'Scheduled'}`,
          },
        ],
      };
    } catch (error) {
      console.error('Error creating content plan:', error);
      throw new Error(`Failed to create content plan: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async publishContent(args: any) {
    const schema = z.object({
      contentId: z.string(),
      repository: z.string(),
      branch: z.string().optional(),
    });

    const { contentId, repository, branch = 'content-update' } = schema.parse(args);

    try {
      // Step 1: Get content from Notion
      console.error('üìÑ Retrieving content from Notion...');
      const notionContent = await this.notionService.getPage({ pageId: contentId });

      // Step 2: Create GitHub branch
      console.error('üåø Creating GitHub branch...');
      const branchResult = await this.githubService.createBranch({
        branchName: branch,
        baseBranch: 'main',
      });

      // Step 3: Create pull request
      console.error('üîÄ Creating pull request...');
      const prResult = await this.githubService.createPullRequest({
        title: `Publish Content: ${contentId}`,
        body: `## Content Publishing\n\n**Content ID**: ${contentId}\n**Branch**: ${branch}\n\n### Content Summary\n${notionContent.content[0].text.split('Content:')[1]?.slice(0, 500) || 'Content retrieved from Notion'}\n\n### Publishing Checklist\n- [ ] Content reviewed\n- [ ] SEO optimized\n- [ ] Images and media added\n- [ ] Links verified\n- [ ] Final approval received\n\n### Notion Page\n${notionContent.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Notion page'}`,
        head: branch,
        base: 'main',
      });

      // Step 4: Update Notion page status
      console.error('üìù Updating Notion page status...');
      const updateResult = await this.notionService.updatePage({
        pageId: contentId,
        status: 'Published',
        content: `## Publishing Status\n\n**Status**: Published\n**Published Date**: ${new Date().toISOString()}\n**GitHub PR**: ${prResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'PR created'}\n\n### Publishing Workflow Completed\n\nThis content has been successfully prepared for publishing through the automated workflow.`,
      });

      return {
        content: [
          {
            type: 'text',
            text: `üöÄ **Content Publishing Workflow Completed!**\n\n**Content ID**: ${contentId}\n**Repository**: ${repository}\n**Branch**: ${branch}\n\n### ‚úÖ Completed Steps:\n\n1. **Content Retrieved**: Successfully retrieved from Notion\n2. **Branch Created**: New branch '${branch}' created\n3. **Pull Request**: PR created for review and merging\n4. **Status Updated**: Notion page marked as published\n\n### üìã Next Steps:\n\n‚Ä¢ Review the pull request\n‚Ä¢ Merge the changes to main branch\n‚Ä¢ Deploy the updated content\n‚Ä¢ Monitor for any issues\n\n### üîó Links:\n\n‚Ä¢ **Notion Page**: ${notionContent.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Updated'}\n‚Ä¢ **GitHub PR**: ${prResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Created'}\n‚Ä¢ **Branch**: ${branchResult.content[0].text.split('Branch URL: ')[1]?.split('\n')[0] || 'Created'}`,
          },
        ],
      };
    } catch (error) {
      console.error('Error publishing content:', error);
      throw new Error(`Failed to publish content: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async researchTopic(args: any) {
    const schema = z.object({
      topic: z.string(),
      depth: z.enum(['basic', 'comprehensive']).default('comprehensive'),
    });

    const { topic, depth } = schema.parse(args);

    try {
      // Step 1: Perform comprehensive research
      console.error('üî¨ Starting research...');
      const researchResult = await this.webSearchService.researchTopic({ topic, depth });

      // Step 2: Create Notion page with research findings
      console.error('üìù Creating research page...');
      const notionContent = `# Research: ${topic}

## Research Summary
${researchResult.content[0].text}

## Key Insights
- Research depth: ${depth}
- Research date: ${new Date().toISOString()}
- Topic: ${topic}

## Next Steps
- Review findings
- Identify key themes
- Plan content structure
- Gather additional sources if needed

## Notes
This research was automatically generated by the Content Workflow MCP Server.`;

      const notionResult = await this.notionService.createPage({
        title: `Research: ${topic}`,
        content: notionContent,
        tags: ['research', topic, 'automated'],
      });

      // Step 3: Create GitHub issue for research tracking
      console.error('üêô Creating research tracking issue...');
      const githubResult = await this.githubService.createIssue({
        title: `Research: ${topic}`,
        body: `## Research Task\n\n**Topic**: ${topic}\n**Depth**: ${depth}\n**Date**: ${new Date().toLocaleDateString()}\n\n### Research Summary\n${researchResult.content[0].text.split('\n').slice(0, 15).join('\n')}...\n\n### Research Findings\n- Comprehensive research completed\n- Key insights identified\n- Sources documented\n\n### Next Steps\n- Review research findings\n- Plan content development\n- Create content outline\n\n### Notion Page\n${notionResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Research page created'}`,
        labels: ['research', topic, 'automated'],
      });

      return {
        content: [
          {
            type: 'text',
            text: `üî¨ **Research Completed Successfully!**\n\n**Topic**: ${topic}\n**Depth**: ${depth}\n**Date**: ${new Date().toLocaleDateString()}\n\n### ‚úÖ Completed Steps:\n\n1. **Research**: ${depth} research performed\n2. **Notion Page**: Research findings documented\n3. **GitHub Issue**: Research tracking created\n\n### üìã Research Summary:\n\n${researchResult.content[0].text.split('\n').slice(0, 10).join('\n')}...\n\n### üîó Links:\n\n‚Ä¢ **Notion Research Page**: ${notionResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Created'}\n‚Ä¢ **GitHub Issue**: ${githubResult.content[0].text.split('URL: ')[1]?.split('\n')[0] || 'Created'}\n\n### üí° Next Steps:\n\n‚Ä¢ Review the research findings\n‚Ä¢ Identify key themes and insights\n‚Ä¢ Plan content development based on research\n‚Ä¢ Consider additional research if needed`,
          },
        ],
      };
    } catch (error) {
      console.error('Error researching topic:', error);
      throw new Error(`Failed to research topic: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  async getWorkflowStatus(args: any = {}) {
    try {
      // Get recent content plans
      const notionPages = await this.notionService.listDatabasePages({ limit: 5 });
      
      // Get recent GitHub issues
      const githubIssues = await this.githubService.listIssues({ limit: 5 });
      
      // Get upcoming calendar events
      const calendarEvents = await this.calendarService.listEvents({ maxResults: 5 });

      return {
        content: [
          {
            type: 'text',
            text: `üìä **Content Workflow Status Report**\n\n**Generated**: ${new Date().toLocaleString()}\n\n### üìù Recent Content Plans (Notion)\n${notionPages.content[0].text.split('\n').slice(2, 7).join('\n')}\n\n### üêô Recent Issues (GitHub)\n${githubIssues.content[0].text.split('\n').slice(2, 7).join('\n')}\n\n### üìÖ Upcoming Events (Calendar)\n${calendarEvents.content[0].text.split('\n').slice(2, 7).join('\n')}\n\n### üìà Workflow Summary\n\n‚Ä¢ **Active Content Plans**: ${notionPages.content[0].text.split('Found ')[1]?.split(' ')[0] || '0'}\n‚Ä¢ **Open Issues**: ${githubIssues.content[0].text.split('Found ')[1]?.split(' ')[0] || '0'}\n‚Ä¢ **Upcoming Deadlines**: ${calendarEvents.content[0].text.split('Found ')[1]?.split(' ')[0] || '0'}\n\n### üéØ Recommendations\n\n‚Ä¢ Review pending content plans\n‚Ä¢ Check upcoming deadlines\n‚Ä¢ Update issue statuses\n‚Ä¢ Schedule content reviews`,
          },
        ],
      };
    } catch (error) {
      console.error('Error getting workflow status:', error);
      throw new Error(`Failed to get workflow status: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }
} 